{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/Admin.js","lib/Category.js","lib/Discourse.js","lib/Post.js","lib/Requestable.js","lib/Topic.js","lib/User.js"],"names":[],"mappings":"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","file":"Discourse.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import Requestable from './Requestable';\n\nclass Admin extends Requestable {\n\n  constructor(auth, apiBase) {\n    super(auth, apiBase)\n  }\n\n  /**\n   * Generate Api key for user\n   * @param {object} [object] \n   * @param {string} [object.username ]\n   * @param {object} [options]\n   * @param {Function} [cb]\n   */\n  generateApiKey({ username }, options, cb) {\n\n    const data = { key: { username } };\n\n    return this._request('POST', '/admin/api/keys', data, options, cb);\n\n  };\n\n}\n\nmodule.exports = Admin","import Requestable from './Requestable';\n\nclass Category extends Requestable {\n\n    constructor(auth, apiBase) {\n        super(auth, apiBase)\n    }\n\n    /**\n     * Get all categories\n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    getAll(options, cb) {\n        return this._request('GET', '/categories.json', null, options, cb);\n    };\n\n     /**\n     * Get all topics related with category\n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    getTopics(categoryId, options, cb) {\n        return this._request('GET', `/c/${categoryId}.json`, null, options, cb);\n    };\n\n}\n\nmodule.exports = Category","\nimport Admin from './Admin';\nimport User from './User';\nimport Post from './Post';\nimport Topic from './Topic';\nimport Category from './Category';\n\nclass Discourse {\n\n    /**\n    * Create a new Discourse.\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to Discourse.\n    * @param {string} [apiBase] - the base Discourse API URL\n    */\n    constructor(auth, apiBase) {\n        this.__apiBase = apiBase;\n        this.__auth = auth || {};\n    }\n\n    /**\n    * Create a new Admin wrapper\n    * @return {Admin}\n    */\n    getAdmin() {\n        return new Admin(this.__auth, this.__apiBase);\n    }\n\n    /**\n    * Create a new User wrapper\n    * @return {User}\n    */\n    getUser() {\n        return new User(this.__auth, this.__apiBase);\n    }\n\n    /**\n    * Create a new Post wrapper\n    * @return {Post}\n    */\n    getPost() {\n        return new Post(this.__auth, this.__apiBase);\n    }\n\n    /**\n    * Create a new Topic wrapper\n    * @return {Topic}\n    */\n    getTopic() {\n        return new Topic(this.__auth, this.__apiBase);\n    }\n\n    /**\n     * Create a new Category wrapper\n     * @return {Category}\n     */\n    getCategory() {\n        return new Category(this.__auth, this.__apiBase);\n    }\n\n}\n\nmodule.exports = Discourse","import Requestable from './Requestable';\n\nclass Post extends Requestable {\n\n    constructor(auth, apiBase) {\n        super(auth, apiBase)\n    }\n\n    /**\n     * Get single posts.\n     * @param {number} [id] \n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    getOne(id, options, cb) {\n        return this._request('GET', `/posts/${id}.json`, null, options, cb);\n    };\n\n    /**\n     * Get latest posts.\n     * @param {object} [object] \n     * @param {string} [object.username ]\n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    getLatest(options, cb) {\n        return this._request('GET', '/posts.json', null, options, cb);\n    };\n\n}\n\nmodule.exports = Post","import axios from 'axios';\n\n/**\n * The error structure returned when a network call fails\n */\nclass ResponseError extends Error {\n   /**\n    * Construct a new ResponseError\n    * @param {string} message - an message to return instead of the the default error message\n    * @param {string} path - the requested path\n    * @param {Object} response - the object returned by Axios\n    */\n   constructor(message, path, response) {\n      super(message);\n      this.path = path;\n      this.request = response.config;\n      this.response = (response || {}).response || response;\n      this.statusCode = response.status;\n   }\n}\n\n/**\n * Requestable wraps the logic for making http requests to the API\n */\nclass Requestable {\n\n   /**\n    * Initialize the http internals.\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to discourse. If auth is\n    *                                  not provided request will be made unauthenticated\n    * @param {string} [apiBase=https://api.discourse.com] - the base discourse API URL\n    */\n   constructor(auth, apiBase) {\n      this.__apiBase = apiBase\n      this.__authSystemHeader = {\n         'Api-Key': auth.api_key,\n         'Api-Username': auth.api_username\n      }\n   }\n\n   /**\n    * Compute the URL to use to make a request.\n    * @private\n    * @param {string} path - either a URL relative to the API base or an absolute URL\n    * @return {string} - the URL to use\n    */\n   __getURL(path) {\n\n      const url = this.__apiBase + path;\n\n      return url\n   }\n\n   /**\n    * Compute the headers required for an API request.\n    * @private\n    * @return {Object} - the headers to use in the request\n    */\n   __getRequestHeaders(options) {\n\n      let headers = {\n         'Content-Type': 'application/json;charset=UTF-8',\n         'Accept': 'application/json'\n      };\n\n      if (options) {\n         // If Auth is system|admin user\n         if (options.isAdmin) {\n            headers = { ...headers, ...this.__authSystemHeader };\n            return headers;\n         }\n\n         // If auth with user credentials\n         if (options.username && options.apiKey) {\n            headers = {\n               ...headers,\n               'Api-Key': options.apiKey,\n               'Api-Username': options.username\n            }\n         }\n      }\n\n      return headers;\n   }\n\n   /**\n    * Make a request.\n    * @param {string} method - the method for the request (GET, PUT, POST, DELETE)\n    * @param {string} path - the path for the request\n    * @param {*} [data] - the data to send to the server. For HTTP methods that don't have a body the data\n    *                   will be sent as query parameters\n    * @param {Requestable.callback} [cb] - the callback for the request\n    * @param {boolean} [raw=false] - if the request should be sent as raw. If this is a falsy value then the\n    *                              request will be made as JSON\n    * @return {Promise} - the Promise for the http request\n    */\n   async _request(method, path, data, options, cb) {\n\n      const url = this.__getURL(path);\n\n      const headers = this.__getRequestHeaders(options);\n\n      let queryParams = {};\n\n      const shouldUseDataAsParams = data && (typeof data === 'object') && methodHasNoBody(method);\n\n      if (shouldUseDataAsParams) {\n         queryParams = data;\n         data = undefined;\n      }\n\n      const config = {\n         url: url,\n         method: method,\n         headers: headers,\n         params: queryParams,\n         data: data,\n         responseType: 'json',\n      };\n\n      try {\n\n         const response = await axios(config);\n\n         if (response.data.hasOwnProperty('errors')) {\n\n            response.status = 400;\n\n            const errorMsg = 'message' in response.data\n               ? response.data.message\n               : JSON.stringify(response.data.errors)\n\n            let error = new ResponseError(errorMsg, path, response);\n            if (cb) {\n               cb(error)\n            } else {\n               throw error\n            }\n         }\n\n         if (cb) {\n            if (response.data && Object.keys(response.data).length > 0) {\n               // When data has results\n               cb(null, response.data, response);\n            } else if (config.method !== 'GET' && Object.keys(response.data).length < 1) {\n               // True when successful submit a request and receive a empty object\n               cb(null, (response.status < 300), response);\n            } else {\n               cb(null, response.data, response);\n            }\n         }\n\n         return response\n\n      } catch (error) {\n\n         if (!error.response) {\n            error = new ResponseError('Discourse api error: Response is undefined', path, {status: 500});\n            throw error\n         }\n\n         const errorMsg = 'message' in error.response.data\n            ? error.response.data.message\n            : JSON.stringify(error.response.data.errors)\n\n         error = new ResponseError(errorMsg, path, error.response);\n\n         if (cb) {\n            cb(error)\n         } else {\n            throw error\n         }\n      }\n   }\n\n   /**\n    * Make a request to an endpoint the returns 204 when true and 404 when false\n    * @param {string} path - the path to request\n    * @param {Object} data - any query parameters for the request\n    * @param {Requestable.callback} cb - the callback that will receive `true` or `false`\n    * @param {method} [method=GET] - HTTP Method to use\n    * @return {Promise} - the promise for the http request\n    */\n   _request204or404(path, data, cb, method = 'GET') {\n      return this._request(method, path, data)\n         .then(function success(response) {\n            if (cb) {\n               cb(null, true, response);\n            }\n            return true;\n         }, function failure(response) {\n            if (response.response.status === 404) {\n               if (cb) {\n                  cb(null, false, response);\n               }\n               return false;\n            }\n\n            if (cb) {\n               cb(response);\n            }\n            throw response;\n         });\n   }\n}\n\nmodule.exports = Requestable;\n\n// ////////////////////////// //\n//  Private helper functions  //\n// ////////////////////////// //\nconst METHODS_WITH_NO_BODY = ['GET', 'HEAD', 'DELETE'];\n\nfunction methodHasNoBody(method) {\n   return METHODS_WITH_NO_BODY.indexOf(method) !== -1;\n}\n\nfunction callbackErrorOrThrow(cb, path) {\n   return function handler(object) {\n      let error;\n      if (object.hasOwnProperty('config')) {\n         const { response: { status, statusText }, config: { method, url } } = object;\n         let message = (`${status} error making request ${method} ${url}: \"${statusText}\"`);\n         error = new ResponseError(message, path, object);\n      } else {\n         error = object;\n      }\n      if (cb) {\n         cb(error);\n      } else {\n         throw error;\n      }\n   };\n}\n","import Requestable from './Requestable';\n\nclass Topic extends Requestable {\n\n  constructor(auth, apiBase) {\n    super(auth, apiBase)\n  }\n\n\n  /**\n   * Get single topics\n   * @param {number} [id]\n   * @param {object} [options]\n   * @param {Function} [cb]\n   */\n  getOne(id, options, cb) {\n    return this._request('GET', `/t/${id}.json`, null, options, cb);\n  };\n\n  /**\n   * Get all topics\n   * @param {object} [options]\n   * @param {Function} [cb]\n   */\n  getAll(options, cb) {\n    return this._request('GET', '/topics', null, options, cb);\n  };\n\n  /**\n   * Get all topics by username.\n   * @param {object} [object]\n   * @param {string} [object.username]\n   * @param {object} [options]\n   * @param {Function} [cb]\n   */\n  getBy({ username }, options, cb) {\n    return this._request('GET', `/topics/created-by/${username}.json`, null, options, cb);\n  };\n\n\n  /**\n   * Get all latest topics\n   * @param {object} [options]\n   * @param {Function} [cb]\n   */\n  getLatest(options, cb) {\n    return this._request('GET', '/latest.json', null, options, cb);\n  };\n\n  /**\n   * Create topic|post|pm\n   * @param {object} [object]\n   * @param {object} [options]\n   * @param {Function} [cb]\n   */\n  create(data, options, cb) {\n\n    if (!data.raw) {\n      throw new Error('Raw is required.');\n    }\n\n    return this._request('POST', '/posts.json', data, options, cb);\n  };\n\n  /**\n   * Get private messages by username\n   * @param username\n   * @param options\n   * @param cb\n   */\n  getPrivateMessages({username}, options, cb) {\n    return this._request('GET', `/topics/private-messages/${username}.json`, null, options, cb)\n  };\n\n  /**\n   * Get private messages by username\n   * @param username\n   * @param options\n   * @param cb\n   */\n  getSentPrivateMessages({username}, options, cb) {\n    return this._request('GET', `/topics/private-messages-sent/${username}.json`, null, options, cb)\n  };\n}\n\nmodule.exports = Topic\n","import Requestable from './Requestable';\n\nclass User extends Requestable {\n\n    constructor(auth, apiBase) {\n        super(auth, apiBase)\n    }\n\n    /**\n     * Create new user\n     * @param {object} [object]\n     * @param {string} [object.username]\n     * @param {string} [object.email]\n     * @param {string} [object.password]\n     * @param {string} [object.name]\n     * @param {boolean} [object.active]\n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    create({ username, email, password, name, active }, options, cb) {\n        const data = {\n            'name': name,\n            'email': email,\n            'username': username,\n            'password': password,\n            'active': active\n        };\n        return this._request('POST', '/users', data, options, cb);\n    };\n\n    /**\n     * Get user by username\n     * @param {object} [object]\n     * @param {string} [object.username ]\n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    getOne({username}, options, cb) {\n        return this._request('GET', '/users/' + username + '.json', null, options, cb);\n    }\n\n    /**\n     * Delet user by id\n     * @param {number} [id]\n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    delete(id, options, cb) {\n        return this._request('DELETE', '/admin/users/' + id + '.json', null, options, cb);\n    }\n\n    /**\n     * Update private message access\n     * @param data\n     * @param options\n     */\n    updatePMAccess(data, options, cb) {\n        return this._request('PUT', `/u/${options.username}.json`, data, options, cb);\n    }\n}\n\nmodule.exports = User\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}