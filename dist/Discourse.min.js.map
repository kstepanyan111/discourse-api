{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/Admin.js","lib/Category.js","lib/Discourse.js","lib/Post.js","lib/Requestable.js","lib/Topic.js","lib/User.js"],"names":["f","exports","module","define","amd","window","global","self","this","Discourse","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","Admin","_Requestable3","auth","apiBase","_classCallCheck","_super","options","cb","data","key","username","_ref","_request","Category","categoryId","concat","_Admin2","__auth","__apiBase","_User2","_Post2","_Topic2","_Category2","Post","id","ResponseError","message","path","response","_this","request","config","statusCode","status","Requestable","headers","Content-Type","Accept","isAdmin","_objectSpread","__authSystemHeader","apiKey","Api-Key","Api-Username","method","url","__getURL","__getRequestHeaders","queryParams","_typeof","METHODS_WITH_NO_BODY","indexOf","undefined","params","responseType","_axios2","hasOwnProperty","errorMsg","JSON","stringify","errors","error","Object","keys","_context","t0","_errorMsg","arguments","then","api_key","api_username","Topic","raw","_ref2","_ref3","User","email","password","name","active"],"mappings":"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","file":"Discourse.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import Requestable from './Requestable';\n\nclass Admin extends Requestable {\n\n  constructor(auth, apiBase) {\n    super(auth, apiBase)\n  }\n\n  /**\n   * Generate Api key for user\n   * @param {object} [object] \n   * @param {string} [object.username ]\n   * @param {object} [options]\n   * @param {Function} [cb]\n   */\n  generateApiKey({ username }, options, cb) {\n\n    const data = { key: { username } };\n\n    return this._request('POST', '/admin/api/keys', data, options, cb);\n\n  };\n\n}\n\nmodule.exports = Admin","import Requestable from './Requestable';\n\nclass Category extends Requestable {\n\n    constructor(auth, apiBase) {\n        super(auth, apiBase)\n    }\n\n    /**\n     * Get all categories\n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    getAll(options, cb) {\n        return this._request('GET', '/categories.json', null, options, cb);\n    };\n\n     /**\n     * Get all topics related with category\n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    getTopics(categoryId, options, cb) {\n        return this._request('GET', `/c/${categoryId}.json`, null, options, cb);\n    };\n\n    /**\n     * Create category\n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    createCategory(data, options, cb) {\n        return this._request('POST', `/categories.json`, data, options, cb);\n    };\n\n}\n\nmodule.exports = Category\n","\nimport Admin from './Admin';\nimport User from './User';\nimport Post from './Post';\nimport Topic from './Topic';\nimport Category from './Category';\n\nclass Discourse {\n\n    /**\n    * Create a new Discourse.\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to Discourse.\n    * @param {string} [apiBase] - the base Discourse API URL\n    */\n    constructor(auth, apiBase) {\n        this.__apiBase = apiBase;\n        this.__auth = auth || {};\n    }\n\n    /**\n    * Create a new Admin wrapper\n    * @return {Admin}\n    */\n    getAdmin() {\n        return new Admin(this.__auth, this.__apiBase);\n    }\n\n    /**\n    * Create a new User wrapper\n    * @return {User}\n    */\n    getUser() {\n        return new User(this.__auth, this.__apiBase);\n    }\n\n    /**\n    * Create a new Post wrapper\n    * @return {Post}\n    */\n    getPost() {\n        return new Post(this.__auth, this.__apiBase);\n    }\n\n    /**\n    * Create a new Topic wrapper\n    * @return {Topic}\n    */\n    getTopic() {\n        return new Topic(this.__auth, this.__apiBase);\n    }\n\n    /**\n     * Create a new Category wrapper\n     * @return {Category}\n     */\n    getCategory() {\n        return new Category(this.__auth, this.__apiBase);\n    }\n\n}\n\nmodule.exports = Discourse","import Requestable from './Requestable';\n\nclass Post extends Requestable {\n\n    constructor(auth, apiBase) {\n        super(auth, apiBase)\n    }\n\n    /**\n     * Get single posts.\n     * @param {number} [id] \n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    getOne(id, options, cb) {\n        return this._request('GET', `/posts/${id}.json`, null, options, cb);\n    };\n\n    /**\n     * Get latest posts.\n     * @param {object} [object] \n     * @param {string} [object.username ]\n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    getLatest(options, cb) {\n        return this._request('GET', '/posts.json', null, options, cb);\n    };\n\n}\n\nmodule.exports = Post","import axios from 'axios';\n\n/**\n * The error structure returned when a network call fails\n */\nclass ResponseError extends Error {\n   /**\n    * Construct a new ResponseError\n    * @param {string} message - an message to return instead of the the default error message\n    * @param {string} path - the requested path\n    * @param {Object} response - the object returned by Axios\n    */\n   constructor(message, path, response) {\n      super(message);\n      this.path = path;\n      this.request = response.config;\n      this.response = (response || {}).response || response;\n      this.statusCode = response.status;\n   }\n}\n\n/**\n * Requestable wraps the logic for making http requests to the API\n */\nclass Requestable {\n\n   /**\n    * Initialize the http internals.\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to discourse. If auth is\n    *                                  not provided request will be made unauthenticated\n    * @param {string} [apiBase=https://api.discourse.com] - the base discourse API URL\n    */\n   constructor(auth, apiBase) {\n      this.__apiBase = apiBase\n      this.__authSystemHeader = {\n         'Api-Key': auth.api_key,\n         'Api-Username': auth.api_username\n      }\n   }\n\n   /**\n    * Compute the URL to use to make a request.\n    * @private\n    * @param {string} path - either a URL relative to the API base or an absolute URL\n    * @return {string} - the URL to use\n    */\n   __getURL(path) {\n\n      const url = this.__apiBase + path;\n\n      return url\n   }\n\n   /**\n    * Compute the headers required for an API request.\n    * @private\n    * @return {Object} - the headers to use in the request\n    */\n   __getRequestHeaders(options) {\n\n      let headers = {\n         'Content-Type': 'application/json;charset=UTF-8',\n         'Accept': 'application/json'\n      };\n\n      if (options) {\n         // If Auth is system|admin user\n         if (options.isAdmin) {\n            headers = { ...headers, ...this.__authSystemHeader };\n            return headers;\n         }\n\n         // If auth with user credentials\n         if (options.username && options.apiKey) {\n            headers = {\n               ...headers,\n               'Api-Key': options.apiKey,\n               'Api-Username': options.username\n            }\n         }\n      }\n\n      return headers;\n   }\n\n   /**\n    * Make a request.\n    * @param {string} method - the method for the request (GET, PUT, POST, DELETE)\n    * @param {string} path - the path for the request\n    * @param {*} [data] - the data to send to the server. For HTTP methods that don't have a body the data\n    *                   will be sent as query parameters\n    * @param {Requestable.callback} [cb] - the callback for the request\n    * @param {boolean} [raw=false] - if the request should be sent as raw. If this is a falsy value then the\n    *                              request will be made as JSON\n    * @return {Promise} - the Promise for the http request\n    */\n   async _request(method, path, data, options, cb) {\n\n      const url = this.__getURL(path);\n\n      const headers = this.__getRequestHeaders(options);\n\n      let queryParams = {};\n\n      const shouldUseDataAsParams = data && (typeof data === 'object') && methodHasNoBody(method);\n\n      if (shouldUseDataAsParams) {\n         queryParams = data;\n         data = undefined;\n      }\n\n      const config = {\n         url: url,\n         method: method,\n         headers: headers,\n         params: queryParams,\n         data: data,\n         responseType: 'json',\n      };\n\n      try {\n\n         const response = await axios(config);\n\n         if (response.data.hasOwnProperty('errors')) {\n\n            response.status = 400;\n\n            const errorMsg = 'message' in response.data\n               ? response.data.message\n               : JSON.stringify(response.data.errors)\n\n            let error = new ResponseError(errorMsg, path, response);\n            if (cb) {\n               cb(error)\n            } else {\n               throw error\n            }\n         }\n\n         if (cb) {\n            if (response.data && Object.keys(response.data).length > 0) {\n               // When data has results\n               cb(null, response.data, response);\n            } else if (config.method !== 'GET' && Object.keys(response.data).length < 1) {\n               // True when successful submit a request and receive a empty object\n               cb(null, (response.status < 300), response);\n            } else {\n               cb(null, response.data, response);\n            }\n         }\n\n         return response\n\n      } catch (error) {\n\n         if (!error.response) {\n            error = new ResponseError('Discourse api error: Response is undefined', path, {status: 500});\n            throw error\n         }\n\n         const errorMsg = 'message' in error.response.data\n            ? error.response.data.message\n            : JSON.stringify(error.response.data.errors)\n\n         error = new ResponseError(errorMsg, path, error.response);\n\n         if (cb) {\n            cb(error)\n         } else {\n            throw error\n         }\n      }\n   }\n\n   /**\n    * Make a request to an endpoint the returns 204 when true and 404 when false\n    * @param {string} path - the path to request\n    * @param {Object} data - any query parameters for the request\n    * @param {Requestable.callback} cb - the callback that will receive `true` or `false`\n    * @param {method} [method=GET] - HTTP Method to use\n    * @return {Promise} - the promise for the http request\n    */\n   _request204or404(path, data, cb, method = 'GET') {\n      return this._request(method, path, data)\n         .then(function success(response) {\n            if (cb) {\n               cb(null, true, response);\n            }\n            return true;\n         }, function failure(response) {\n            if (response.response.status === 404) {\n               if (cb) {\n                  cb(null, false, response);\n               }\n               return false;\n            }\n\n            if (cb) {\n               cb(response);\n            }\n            throw response;\n         });\n   }\n}\n\nmodule.exports = Requestable;\n\n// ////////////////////////// //\n//  Private helper functions  //\n// ////////////////////////// //\nconst METHODS_WITH_NO_BODY = ['GET', 'HEAD', 'DELETE'];\n\nfunction methodHasNoBody(method) {\n   return METHODS_WITH_NO_BODY.indexOf(method) !== -1;\n}\n\nfunction callbackErrorOrThrow(cb, path) {\n   return function handler(object) {\n      let error;\n      if (object.hasOwnProperty('config')) {\n         const { response: { status, statusText }, config: { method, url } } = object;\n         let message = (`${status} error making request ${method} ${url}: \"${statusText}\"`);\n         error = new ResponseError(message, path, object);\n      } else {\n         error = object;\n      }\n      if (cb) {\n         cb(error);\n      } else {\n         throw error;\n      }\n   };\n}\n","import Requestable from './Requestable';\n\nclass Topic extends Requestable {\n\n  constructor(auth, apiBase) {\n    super(auth, apiBase)\n  }\n\n\n  /**\n   * Get single topics\n   * @param {number} [id]\n   * @param {object} [options]\n   * @param {Function} [cb]\n   */\n  getOne(id, options, cb) {\n    return this._request('GET', `/t/${id}.json`, null, options, cb);\n  };\n\n  /**\n   * Get all topics\n   * @param {object} [options]\n   * @param {Function} [cb]\n   */\n  getAll(options, cb) {\n    return this._request('GET', '/topics', null, options, cb);\n  };\n\n  /**\n   * Get all topics by username.\n   * @param {object} [object]\n   * @param {string} [object.username]\n   * @param {object} [options]\n   * @param {Function} [cb]\n   */\n  getBy({ username }, options, cb) {\n    return this._request('GET', `/topics/created-by/${username}.json`, null, options, cb);\n  };\n\n\n  /**\n   * Get all latest topics\n   * @param {object} [options]\n   * @param {Function} [cb]\n   */\n  getLatest(options, cb) {\n    return this._request('GET', '/latest.json', null, options, cb);\n  };\n\n  /**\n   * Create topic|post|pm\n   * @param {object} [object]\n   * @param {object} [options]\n   * @param {Function} [cb]\n   */\n  create(data, options, cb) {\n\n    if (!data.raw) {\n      throw new Error('Raw is required.');\n    }\n\n    return this._request('POST', '/posts.json', data, options, cb);\n  };\n\n  /**\n   * Get private messages by username\n   * @param username\n   * @param options\n   * @param cb\n   */\n  getPrivateMessages({username}, options, cb) {\n    return this._request('GET', `/topics/private-messages/${username}.json`, null, options, cb)\n  };\n\n  /**\n   * Get private messages by username\n   * @param username\n   * @param options\n   * @param cb\n   */\n  getSentPrivateMessages({username}, options, cb) {\n    return this._request('GET', `/topics/private-messages-sent/${username}.json`, null, options, cb)\n  };\n}\n\nmodule.exports = Topic\n","import Requestable from './Requestable';\n\nclass User extends Requestable {\n\n    constructor(auth, apiBase) {\n        super(auth, apiBase)\n    }\n\n    /**\n     * Create new user\n     * @param {object} [object]\n     * @param {string} [object.username]\n     * @param {string} [object.email]\n     * @param {string} [object.password]\n     * @param {string} [object.name]\n     * @param {boolean} [object.active]\n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    create({ username, email, password, name, active }, options, cb) {\n        const data = {\n            'name': name,\n            'email': email,\n            'username': username,\n            'password': password,\n            'active': active\n        };\n        return this._request('POST', '/users', data, options, cb);\n    };\n\n    /**\n     * Get user by username\n     * @param {object} [object]\n     * @param {string} [object.username ]\n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    getOne({username}, options, cb) {\n        return this._request('GET', '/users/' + username + '.json', null, options, cb);\n    }\n\n    /**\n     * Delet user by id\n     * @param {number} [id]\n     * @param {object} [options]\n     * @param {Function} [cb]\n     */\n    delete(id, options, cb) {\n        return this._request('DELETE', '/admin/users/' + id + '.json', null, options, cb);\n    }\n\n    /**\n     * Update private message access\n     * @param data\n     * @param options\n     */\n    updatePMAccess(data, options, cb) {\n        return this._request('PUT', `/u/${options.username}.json`, data, options, cb);\n    }\n}\n\nmodule.exports = User\n"]}