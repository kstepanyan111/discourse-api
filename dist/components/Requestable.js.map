{"version":3,"sources":["Requestable.js"],"names":["ResponseError","message","path","response","request","config","statusCode","status","Error","Requestable","auth","apiBase","__apiBase","__authSystemHeader","api_key","api_username","url","options","headers","isAdmin","username","apiKey","method","data","cb","__getURL","__getRequestHeaders","queryParams","shouldUseDataAsParams","methodHasNoBody","undefined","params","responseType","hasOwnProperty","errorMsg","JSON","stringify","errors","error","Object","keys","length","_request","then","success","failure","module","exports","METHODS_WITH_NO_BODY","indexOf","callbackErrorOrThrow","handler","object","statusText"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n/**\n * The error structure returned when a network call fails\n */\nclass ResponseError extends Error {\n   /**\n    * Construct a new ResponseError\n    * @param {string} message - an message to return instead of the the default error message\n    * @param {string} path - the requested path\n    * @param {Object} response - the object returned by Axios\n    */\n   constructor(message, path, response) {\n      super(message);\n      this.path = path;\n      this.request = response.config;\n      this.response = (response || {}).response || response;\n      this.statusCode = response.status;\n   }\n}\n\n/**\n * Requestable wraps the logic for making http requests to the API\n */\nclass Requestable {\n\n   /**\n    * Initialize the http internals.\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to discourse. If auth is\n    *                                  not provided request will be made unauthenticated\n    * @param {string} [apiBase=https://api.discourse.com] - the base discourse API URL\n    */\n   constructor(auth, apiBase) {\n      this.__apiBase = apiBase\n      this.__authSystemHeader = {\n         'Api-Key': auth.api_key,\n         'Api-Username': auth.api_username\n      }\n   }\n\n   /**\n    * Compute the URL to use to make a request.\n    * @private\n    * @param {string} path - either a URL relative to the API base or an absolute URL\n    * @return {string} - the URL to use\n    */\n   __getURL(path) {\n\n      const url = this.__apiBase + path;\n\n      return url\n   }\n\n   /**\n    * Compute the headers required for an API request.\n    * @private\n    * @return {Object} - the headers to use in the request\n    */\n   __getRequestHeaders(options) {\n\n      let headers = {\n         'Content-Type': 'application/json;charset=UTF-8',\n         'Accept': 'application/json'\n      };\n\n      if (options) {\n         // If Auth is system|admin user\n         if (options.isAdmin) {\n            headers = { ...headers, ...this.__authSystemHeader };\n            return headers;\n         }\n\n         // If auth with user credentials\n         if (options.username && options.apiKey) {\n            headers = {\n               ...headers,\n               'Api-Key': options.apiKey,\n               'Api-Username': options.username\n            }\n         }\n      }\n\n      return headers;\n   }\n\n   /**\n    * Make a request.\n    * @param {string} method - the method for the request (GET, PUT, POST, DELETE)\n    * @param {string} path - the path for the request\n    * @param {*} [data] - the data to send to the server. For HTTP methods that don't have a body the data\n    *                   will be sent as query parameters\n    * @param {Requestable.callback} [cb] - the callback for the request\n    * @param {boolean} [raw=false] - if the request should be sent as raw. If this is a falsy value then the\n    *                              request will be made as JSON\n    * @return {Promise} - the Promise for the http request\n    */\n   async _request(method, path, data, options, cb) {\n\n      const url = this.__getURL(path);\n      const headers = this.__getRequestHeaders(options);\n\n      let queryParams = {};\n\n      const shouldUseDataAsParams = data && (typeof data === 'object') && methodHasNoBody(method);\n\n      if (shouldUseDataAsParams) {\n         queryParams = data;\n         data = undefined;\n      }\n\n      const config = {\n         url: url,\n         method: method,\n         headers: headers,\n         params: queryParams,\n         data: data,\n         responseType: 'json',\n      };\n\n      try {\n\n         const response = await axios(config);\n\n         if (response.data.hasOwnProperty('errors')) {\n            \n            response.status = 400;\n\n            const errorMsg = 'message' in response.data\n               ? response.data.message\n               : JSON.stringify(response.data.errors)\n\n            let error = new ResponseError(errorMsg, path, response);\n            if (cb) {\n               cb(error)\n            } else {\n               throw error\n            }\n         }\n\n         if (cb) {\n            if (response.data && Object.keys(response.data).length > 0) {\n               // When data has results\n               cb(null, response.data, response);\n            } else if (config.method !== 'GET' && Object.keys(response.data).length < 1) {\n               // True when successful submit a request and receive a empty object\n               cb(null, (response.status < 300), response);\n            } else {\n               cb(null, response.data, response);\n            }\n         }\n\n\n         return response\n\n      } catch (error) {\n\n         const errorMsg = 'message' in error.response.data\n            ? error.response.data.message\n            : JSON.stringify(error.response.data.errors)\n\n         error = new ResponseError(errorMsg, path, error.response);\n\n         if (cb) {\n            cb(error)\n         } else {\n            throw error\n         }\n      }\n   }\n\n   /**\n    * Make a request to an endpoint the returns 204 when true and 404 when false\n    * @param {string} path - the path to request\n    * @param {Object} data - any query parameters for the request\n    * @param {Requestable.callback} cb - the callback that will receive `true` or `false`\n    * @param {method} [method=GET] - HTTP Method to use\n    * @return {Promise} - the promise for the http request\n    */\n   _request204or404(path, data, cb, method = 'GET') {\n      return this._request(method, path, data)\n         .then(function success(response) {\n            if (cb) {\n               cb(null, true, response);\n            }\n            return true;\n         }, function failure(response) {\n            if (response.response.status === 404) {\n               if (cb) {\n                  cb(null, false, response);\n               }\n               return false;\n            }\n\n            if (cb) {\n               cb(response);\n            }\n            throw response;\n         });\n   }\n}\n\nmodule.exports = Requestable;\n\n// ////////////////////////// //\n//  Private helper functions  //\n// ////////////////////////// //\nconst METHODS_WITH_NO_BODY = ['GET', 'HEAD', 'DELETE'];\n\nfunction methodHasNoBody(method) {\n   return METHODS_WITH_NO_BODY.indexOf(method) !== -1;\n}\n\nfunction callbackErrorOrThrow(cb, path) {\n   return function handler(object) {\n      let error;\n      if (object.hasOwnProperty('config')) {\n         const { response: { status, statusText }, config: { method, url } } = object;\n         let message = (`${status} error making request ${method} ${url}: \"${statusText}\"`);\n         error = new ResponseError(message, path, object);\n      } else {\n         error = object;\n      }\n      if (cb) {\n         cb(error);\n      } else {\n         throw error;\n      }\n   };\n}\n"],"file":"Requestable.js"}