{"version":3,"sources":["topics.js"],"names":["exports","module","Discourse","actionTypeEnum","prototype","createTopic","options","callback","title","raw","category","post","url","params","error","body","httpCode","getCreatedTopics","username","get","filter","NEW_TOPIC","getLastPostId","JSON","parse","latest_posts","id","getLastPostIdSync","response","getSync","statusCode","Error","headers","status","getPost","post_id","getPostSync","replyToTopic","topic_id","replyToPost","reply_to_post_number","getTopicAndReplies","deleteTopic","updatePost","edit_reason","put","updatePostSync","putSync","updateTopic","slug"],"mappings":"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","sourcesContent":["exports = module.exports = function(Discourse, actionTypeEnum) {\n\n  \"use strict\";\n\n  var actionTypeEnum = actionTypeEnum;\n\n  /**\n   * Create Topic\n   * @param {object} object\n   * @param {string} object.title\n   * @param {string} object.row\n   * @param {string} object.category\n   * @param {object} options\n   * @param {*} callback\n   */\n  Discourse.prototype.createTopic = function({title, raw, category}, options, callback) {\n    this.post({\n        url: 'posts',\n        params: { 'title': title, 'raw': raw, 'category': category, 'archetype': 'regular' },\n        options\n      },\n      function(error, body, httpCode) {\n        callback(error, body, httpCode);\n    });\n  };\n\n /**\n   * Get Created Topic\n   * @param {object} object \n   * @param {string} object.username \n   * @param {object} options\n   * @param {*} callback\n   */\n  Discourse.prototype.getCreatedTopics = function({username}, options, callback) {\n    this.get({ \n      url:'user_actions.json',\n      params: { username: username, filter: actionTypeEnum.NEW_TOPIC },\n      options\n    },\n      function(error, body, httpCode) {\n        callback(error, body, httpCode);\n      }\n    );\n\n  };\n\n  Discourse.prototype.getLastPostId = function(callback) {\n\n    this.get('/posts.json',\n      {},\n      function (error, body, httpCode) {\n        callback(error, JSON.parse(body).latest_posts[0].id, httpCode);\n      }\n    );\n\n  };\n\n  Discourse.prototype.getLastPostIdSync = function() {\n\n    var response = this.getSync('posts.json', {}, true);\n    if (response.statusCode === 200) {\n      var body = JSON.parse(response.body);\n      return body.latest_posts[0].id;\n    } else {\n      throw new Error(response.headers.status);\n    }\n\n  };\n\n  Discourse.prototype.getPost = function(post_id, callback) {\n\n    this.get('posts/' + post_id + '.json',\n      {},\n      function (error, body, httpCode) {\n        callback(error, JSON.parse(body), httpCode);\n      }\n    );\n\n  };\n\n  Discourse.prototype.getPostSync = function(post_id) {\n\n    return JSON.parse(this.getSync('posts/' + post_id + '.json', {}, true).body);\n\n  };\n\n  Discourse.prototype.replyToTopic = function(raw, topic_id, callback) {\n    this.post('posts', { 'raw': raw, 'topic_id': topic_id }, function(error, body, httpCode) {\n      callback(error, body, httpCode);\n    });\n  };\n\n  Discourse.prototype.replyToPost = function(raw, topic_id, reply_to_post_number, callback) {\n    this.post('posts', { 'raw': raw, 'topic_id': topic_id, 'reply_to_post_number': reply_to_post_number }, function(error, body, httpCode) {\n      callback(error, body, httpCode);\n    });\n  };\n\n  Discourse.prototype.getTopicAndReplies = function(topic_id, callback) {\n\n    this.get('t/' + topic_id + '.json',\n      {},\n      function(error, body, httpCode) {\n        callback(error, body, httpCode);\n      }\n    );\n\n  };\n\n  Discourse.prototype.deleteTopic = function(topic_id, callback) {\n\n    this.delete('t/' + topic_id,\n      {},\n      function(error, body, httpCode) {\n        callback(error, body, httpCode);\n      }\n    );\n\n  };\n\n  Discourse.prototype.updatePost = function(post_id, raw, edit_reason, callback) {\n\n    this.put(\n      'posts/' + post_id,\n      { 'post[raw]': raw, 'post[edit_reason]': edit_reason },\n      function(error, body, httpCode) {\n        callback(error, body, httpCode);\n      }\n    );\n\n  };\n\n  Discourse.prototype.updatePostSync = function(post_id, raw, edit_reason) {\n\n    return this.putSync('posts/' + post_id, {\n      post: {\n        raw: raw,\n        edit_reason: edit_reason\n      }\n    });\n\n  };\n\n  Discourse.prototype.updateTopic = function(slug, topic_id, title, category, callback) {\n\n    this.put(\n      't/' + slug + '/' + topic_id,\n      { title: title, category: category },\n      function(error, body, httpCode) {\n        callback(error, body, httpCode);\n      }\n    );\n\n  };\n\n};\n"],"file":"topics.js"}