{"version":3,"sources":["users.js"],"names":["exports","module","Discourse","actionTypeEnum","prototype","createUser","options","callback","name","email","username","password","active","that","post","url","params","error","body","httpCode","deleteUser","id","context","deleteAndBlockUser","block_email","block_urls","block_ip","filterUsers","filter","get","show_emails","filterUsersSync","JSON","parse","getSync","getUser","json","user","err","getUserActivity","offset","REPLY","login","logout","fetchConfirmationValue","getUserEmail","put"],"mappings":"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","sourcesContent":["exports = module.exports = function(Discourse, actionTypeEnum) {\n\n  \"use strict\";\n\n  var actionTypeEnum = actionTypeEnum;\n\n  Discourse.prototype.createUser = function ({name, email, username, password, active}, options, callback) {\n\n    var that = this;\n\n    that.post({\n      url: 'users',\n      params: {\n        'name': name,\n        'email': email,\n        'username': username,\n        'password': password,\n        'active': active\n      },\n      options\n    },\n      function (error, body, httpCode) {\n        callback(error, body, httpCode);\n      }\n    );\n\n  };\n\n  Discourse.prototype.deleteUser = function (id, username, callback) {\n    this.delete('admin/users/' + id + '.json',\n      {context: '/admin/users/' + username},\n      function (error, body, httpCode) {\n        callback(error, body, httpCode);\n      }\n    );\n  };\n\n  /**\n   * Delete user and block their email and IP address\n   * @param id\n   * @param username\n   * @param callback\n   */\n  Discourse.prototype.deleteAndBlockUser = function (id, username, callback) {\n    this.delete('/admin/users/' + id + '.json',\n      {\n        context: '/admin/users/' + username,\n        block_email: true,\n        block_urls: true,\n        block_ip: true\n      },\n      function (error, body, httpCode) {\n        callback(error, body, httpCode);\n      }\n    );\n  };\n\n  \n  /**\n   * Filter users by username, email, or IP address via the Admin list of active users\n   * @param {String} filter - username, email or IP address for partial matching against users\n   * @param callback\n   */\n  Discourse.prototype.filterUsers = function (filter, callback) {\n    this.get('admin/users/list/active.json', { filter: filter, show_emails: true }, function(error, body, httpCode) {\n      callback(error, body, httpCode);\n    });\n  };\n\n  /**\n   * Filter users by username, email, or IP address via the Admin list of active users\n   * @param {String} filter - username, email or IP address for partial matching against users\n   * @return Array of up to 100 user objects\n   */\n  Discourse.prototype.filterUsersSync = function(filter) {\n    return JSON.parse(this.getSync('admin/users/list/active.json', { filter: filter, show_emails: true }, true).body);\n  }\n\n\n  Discourse.prototype.getUser = function ({username}, options, callback) {\n    this.get({\n      url: 'users/' + username + '.json',\n      options\n    },\n      function (error, body, httpCode) {\n\n        if (error) return callback(error, null);\n\n        try {\n          var json = JSON.parse(body);\n          if (json.user.id) return callback(null, json);\n          else return callback(null, null);\n        }\n        catch (err) {\n          return callback(err, null);\n        }\n\n      }\n    );\n  };\n\n  Discourse.prototype.getUserActivity = function (username, offset, callback) {\n    this.get('user_actions.json',\n      {\n        username: username,\n        filter: actionTypeEnum.REPLY,\n        offset: offset || 0\n      },\n      function (error, body, httpCode) {\n        callback(error, body, httpCode);\n      }\n    );\n  };\n\n  Discourse.prototype.login = function (username, password, callback) {\n    this.post('session', {'login': username, 'password': password}, function (error, body, httpCode) {\n      callback(error, body, httpCode);\n    });\n  };\n\n  Discourse.prototype.logout = function (username, callback) {\n    this.delete('session/' + username, {}, function (error, body, httpCode) {\n      callback(error, body, httpCode);\n    });\n  };\n\n  Discourse.prototype.fetchConfirmationValue = function (callback) {\n\n    // discourse api should bypass the honeypot since it is a trusted user (confirmed via api key)\n\n    this.get('users/hp.json',\n      {},\n      function (error, body, httpCode) {\n        callback(error, body, httpCode);\n      }\n    );\n\n  };\n\n  Discourse.prototype.getUserEmail = function (username, callback) {\n    this.put('users/' + username + '/emails.json',\n      {context: '/users/' + username + '/activity'},\n      function (error, body, httpCode) {\n        callback(error, body, httpCode);\n      }\n    );\n  };\n\n};\n"],"file":"users.js"}